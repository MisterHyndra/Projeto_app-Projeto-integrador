import React, { createContext, useState, useContext, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { format, parseISO, addMinutes } from 'date-fns';
import { ptBR } from 'date-fns/locale';
import { useAuth } from './AuthContext';
import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';

const MedicationContext = createContext();

export const useMedication = () => useContext(MedicationContext);

export const MedicationProvider = ({ children }) => {
  const [medications, setMedications] = useState([]);
  const [history, setHistory] = useState([]);
  const [loading, setLoading] = useState(true);
  const [notificationSettings, setNotificationSettings] = useState({
    soundEnabled: true,
    vibrationEnabled: true,
    reminderInterval: 5, // minutes
    maxReminders: 3
  });
  const { isAuthenticated, user } = useAuth();

  // Carregar medicamentos do AsyncStorage quando o componente for montado
  useEffect(() => {
    const loadMedications = async () => {
      try {
        if (isAuthenticated && user?.id) {
          setLoading(true);
          const storedMedications = await AsyncStorage.getItem(`medications_${user.id}`);
          const storedHistory = await AsyncStorage.getItem(`history_${user.id}`);
          
          if (storedMedications) {
            setMedications(JSON.parse(storedMedications));
          }
          
          if (storedHistory) {
            setHistory(JSON.parse(storedHistory));
          }
        }
      } catch (error) {
        console.error('Erro ao carregar medicamentos:', error);
      } finally {
        setLoading(false);
      }
    };

    loadMedications();
  }, [isAuthenticated, user]);

  // Salvar medicamentos no AsyncStorage sempre que forem atualizados
  useEffect(() => {
    const saveMedications = async () => {
      try {
        if (isAuthenticated && user?.id && !loading) {
          await AsyncStorage.setItem(`medications_${user.id}`, JSON.stringify(medications));
        }
      } catch (error) {
        console.error('Erro ao salvar medicamentos:', error);
      }
    };

    saveMedications();
  }, [medications, isAuthenticated, user, loading]);

  // Salvar hist√≥rico no AsyncStorage sempre que for atualizado
  useEffect(() => {
    const saveHistory = async () => {
      try {
        if (isAuthenticated && user?.id && !loading) {
          await AsyncStorage.setItem(`history_${user.id}`, JSON.stringify(history));
        }
      } catch (error) {
        console.error('Erro ao salvar hist√≥rico:', error);
      }
    };

    saveHistory();
  }, [history, isAuthenticated, user, loading]);

  // Adicionar um novo medicamento
  const addMedication = async (medicationData) => {
    try {
      // Garantir que estamos usando a data atual correta
      const currentDate = new Date();
      
      const newMedication = {
        id: Date.now().toString(),
        ...medicationData,
        createdAt: currentDate.toISOString(),
      };
      
      // Adicionar o novo medicamento √† lista
      const updatedMedications = [...medications, newMedication];
      setMedications(updatedMedications);
      
      // Salvar imediatamente no AsyncStorage para garantir persist√™ncia
      if (isAuthenticated && user?.id) {
        await AsyncStorage.setItem(`medications_${user.id}`, JSON.stringify(updatedMedications));
      }
      
      // Para cada hor√°rio do medicamento, criar uma entrada no hist√≥rico como agendado
      const updatedHistory = [...history];
      
      if (medicationData.timeOfDay && medicationData.timeOfDay.length > 0) {
        medicationData.timeOfDay.forEach(timeStr => {
          // Criar data para o hor√°rio agendado
          const [hours, minutes] = timeStr.split(':').map(Number);
          const scheduledDate = new Date(currentDate);
          scheduledDate.setHours(hours, minutes, 0, 0);
          
          // Se o hor√°rio j√° passou hoje, agendar para amanh√£
          if (scheduledDate < currentDate) {
            scheduledDate.setDate(scheduledDate.getDate() + 1);
          }
          
          const historyEntry = {
            id: `${Date.now().toString()}_${timeStr}`,
            type: 'scheduled',
            status: 'scheduled', // Status inicial: agendado
            medicationId: newMedication.id,
            medicationName: newMedication.name,
            scheduledTime: scheduledDate.toISOString(),
            timestamp: scheduledDate.toISOString(),
            date: scheduledDate.toISOString().split('T')[0], // Armazenar apenas a data (YYYY-MM-DD)
          };
          
          updatedHistory.push(historyEntry);
        });
      } else {
        // Se n√£o houver hor√°rios espec√≠ficos, criar uma entrada gen√©rica
        const historyEntry = {
          id: Date.now().toString(),
          type: 'add',
          status: 'scheduled',
          medicationId: newMedication.id,
          medicationName: newMedication.name,
          scheduledTime: '',
          timestamp: currentDate.toISOString(),
          date: currentDate.toISOString().split('T')[0], // Armazenar apenas a data (YYYY-MM-DD)
        };
        
        updatedHistory.push(historyEntry);
      }
      
      setHistory(updatedHistory);
      
      // Salvar hist√≥rico no AsyncStorage
      if (isAuthenticated && user?.id) {
        await AsyncStorage.setItem(`history_${user.id}`, JSON.stringify(updatedHistory));
      }
      
      // Agendar notifica√ß√µes para este medicamento
      scheduleNotificationsForMedication(newMedication);
      
      return true;
    } catch (error) {
      console.error('Erro ao adicionar medicamento:', error);
      return false;
    }
  };

  // Atualizar um medicamento existente
  const updateMedication = async (id, medicationData) => {
    try {
      const updatedMedications = medications.map(med => 
        med.id === id ? { ...med, ...medicationData } : med
      );
      
      setMedications(updatedMedications);
      
      // Atualizar notifica√ß√µes
      const updatedMedication = updatedMedications.find(med => med.id === id);
      if (updatedMedication) {
        scheduleNotificationsForMedication(updatedMedication);
      }
      
      return true;
    } catch (error) {
      console.error('Erro ao atualizar medicamento:', error);
      return false;
    }
  };

  // Remover um medicamento
  const deleteMedication = async (id) => {
    try {
      const updatedMedications = medications.filter(med => med.id !== id);
      setMedications(updatedMedications);
      
      // Cancelar notifica√ß√µes
      await cancelNotificationsForMedication(id);
      
      return true;
    } catch (error) {
      console.error('Erro ao remover medicamento:', error);
      return false;
    }
  };

  /**
   * Registra uma dose de medicamento como tomada
   * @param {string} medicationId - ID do medicamento
   * @param {string|Date} scheduledTime - Data/hora programada (opcional)
   * @returns {Promise<boolean>} - Retorna true se o registro for bem-sucedido
   */
  const logMedicationTaken = async (medicationId, scheduledTime) => {
    // 1. Valida√ß√£o inicial dos par√¢metros
    if (!medicationId) {
      console.error('‚ùå Erro: ID do medicamento n√£o fornecido');
      return false;
    }

    console.log(`\nüìù Iniciando registro de medicamento tomado`);
    console.log(`üíä ID do medicamento: ${medicationId}`);
    console.log(`‚è∞ Hor√°rio programado: ${scheduledTime || 'N√£o especificado'}`);

    try {
      // 2. Validar e processar o hor√°rio
      const currentDate = new Date();
      let timestamp = currentDate.toISOString();
      let scheduledTimestamp = null;

      // Processar scheduledTime se fornecido
      if (scheduledTime) {
        try {
          scheduledTimestamp = typeof scheduledTime === 'string' 
            ? new Date(scheduledTime) 
            : new Date(scheduledTime);
          
          // Verificar se a data √© v√°lida
          if (isNaN(scheduledTimestamp.getTime())) {
            console.warn('‚ö†Ô∏è  Data/hora programada inv√°lida, usando data/hora atual');
            scheduledTimestamp = currentDate;
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è  Erro ao processar data/hora programada, usando data/hora atual:', error);
          scheduledTimestamp = currentDate;
        }
      }

      // 3. Encontrar o medicamento
      const medication = medications.find(med => med.id === medicationId);
      
      if (!medication) {
        console.error(`‚ùå Medicamento n√£o encontrado com o ID: ${medicationId}`);
        
        // Mesmo sem encontrar o medicamento, podemos registrar no hist√≥rico
        // para manter um registro completo
        const errorLog = {
          id: `error_${Date.now()}`,
          type: 'error',
          status: 'error',
          message: 'Medicamento n√£o encontrado',
          error: `ID n√£o encontrado: ${medicationId}`,
          timestamp: timestamp,
          scheduledTime: scheduledTimestamp ? scheduledTimestamp.toISOString() : null,
          date: timestamp.split('T')[0]
        };
        
        const updatedHistory = [...history, errorLog];
        setHistory(updatedHistory);
        
        if (isAuthenticated && user?.id) {
          await AsyncStorage.setItem(`history_${user.id}`, JSON.stringify(updatedHistory));
        }
        
        return false;
      }

      // 4. Criar entrada de hist√≥rico
      const logEntry = {
        id: `taken_${Date.now()}_${medicationId}`,
        medicationId,
        medicationName: medication.name,
        dosage: medication.dosage,
        timestamp: timestamp,
        scheduledTime: scheduledTimestamp ? scheduledTimestamp.toISOString() : timestamp,
        type: 'taken',
        status: 'taken',
        date: timestamp.split('T')[0], // Formato YYYY-MM-DD
        metadata: {
          source: 'user',
          deviceTime: new Date().toISOString(),
          timezoneOffset: currentDate.getTimezoneOffset(),
          appVersion: '1.0.0' // TODO: Obter da configura√ß√£o do app
        }
      };

      console.log('üìã Dados do registro:', JSON.stringify({
        ...logEntry,
        scheduledTime: logEntry.scheduledTime || 'N/A'
      }, null, 2));
      
      // 5. Atualizar o estado local
      const updatedHistory = [...history, logEntry];
      setHistory(updatedHistory);
      
      // 6. Persistir no AsyncStorage
      if (isAuthenticated && user?.id) {
        try {
          await AsyncStorage.setItem(`history_${user.id}`, JSON.stringify(updatedHistory));
          console.log('üíæ Hist√≥rico salvo com sucesso no AsyncStorage');
        } catch (storageError) {
          console.error('‚ùå Erro ao salvar no AsyncStorage:', storageError);
          // N√£o retornamos false aqui para n√£o falhar a opera√ß√£o principal
        }
      }
      
      // 7. Verificar se h√° notifica√ß√µes pendentes para este hor√°rio e cancel√°-las
      if (scheduledTimestamp) {
        try {
          const scheduledNotifications = await Notifications.getAllScheduledNotificationsAsync();
          const notificationsToCancel = scheduledNotifications.filter(notification => {
            const notificationData = notification.content.data;
            return (
              notificationData.medicationId === medicationId &&
              notificationData.scheduledTime === scheduledTimestamp.toISOString()
            );
          });
          
          if (notificationsToCancel.length > 0) {
            console.log(`üîî Cancelando ${notificationsToCancel.length} notifica√ß√£o(√µes) pendentes`);
            await Promise.all(
              notificationsToCancel.map(n => 
                Notifications.dismissNotificationAsync(n.identifier)
              )
            );
          }
        } catch (notificationError) {
          console.error('‚ö†Ô∏è  Erro ao cancelar notifica√ß√µes pendentes:', notificationError);
          // Continuar mesmo com erro
        }
      }
      
      console.log('‚úÖ Medicamento registrado como tomado com sucesso!');
      return true;
      
    } catch (error) {
      console.error('‚ùå ERRO CR√çTICO ao registrar medicamento tomado:', error);
      
      // Tentar registrar o erro no hist√≥rico mesmo em caso de falha
      try {
        const errorLog = {
          id: `error_${Date.now()}`,
          type: 'error',
          status: 'error',
          message: 'Falha ao registrar medicamento tomado',
          error: error.message,
          timestamp: new Date().toISOString(),
          medicationId: medicationId || 'unknown',
          date: new Date().toISOString().split('T')[0]
        };
        
        const errorHistory = [...history, errorLog];
        setHistory(errorHistory);
        
        if (isAuthenticated && user?.id) {
          await AsyncStorage.setItem(`history_${user.id}`, JSON.stringify(errorHistory));
        }
      } catch (innerError) {
        console.error('Falha ao registrar erro no hist√≥rico:', innerError);
      }
      
      return false;
    }
  };

  // Registrar uma dose perdida
  const logMedicationMissed = async (medicationId, scheduledTime) => {
    try {
      console.log(`Registrando medicamento perdido - ID: ${medicationId}, Hor√°rio: ${scheduledTime}`);
      
      // Verificar se o medicamento existe na lista de medicamentos
      const medication = medications.find(med => med.id === medicationId);
      const currentDate = new Date();
      let logEntry;
      let updatedHistory;
      
      if (!medication) {
        console.error('Medicamento n√£o encontrado na lista de medicamentos:', medicationId);
        // Mesmo que n√£o encontre, vamos criar um registro com as informa√ß√µes dispon√≠veis
        console.log('Criando registro de hist√≥rico com informa√ß√µes parciais');
        
        logEntry = {
          id: Date.now().toString(),
          medicationId,
          medicationName: `Medicamento (ID: ${medicationId})`,
          scheduledTime: scheduledTime || currentDate.toISOString(),
          missedAt: currentDate.toISOString(),
          status: 'missed',
          date: currentDate.toISOString().split('T')[0],
          notes: 'Medicamento n√£o encontrado na lista ao registrar como perdido'
        };
        
        updatedHistory = [...history, logEntry];
        setHistory(updatedHistory);
        
        if (isAuthenticated && user?.id) {
          try {
            await AsyncStorage.setItem(`history_${user.id}`, JSON.stringify(updatedHistory));
            
            // Tenta notificar contatos de emerg√™ncia mesmo sem todas as informa√ß√µes
            try {
              await api.post('/notifications/medication-missed', {
                medicationName: `Medicamento (ID: ${medicationId})`,
                scheduledTime: scheduledTime || currentDate.toISOString()
              });
            } catch (error) {
              console.error('Erro ao notificar contatos de emerg√™ncia:', error);
            }
          } catch (storageError) {
            console.error('Erro ao salvar hist√≥rico no AsyncStorage:', storageError);
          }
        }
        
        return true;
      }
      
      // Se encontrou o medicamento, cria um registro mais completo
      logEntry = {
        id: `${medicationId}_${currentDate.getTime()}`,
        medicationId,
        medicationName: medication.name,
        scheduledTime: scheduledTime || currentDate.toISOString(),
        missedAt: currentDate.toISOString(),
        status: 'missed',
        date: currentDate.toISOString().split('T')[0],
        dosage: medication.dosage,
        timeOfDay: medication.timeOfDay
      };
      
      console.log('Criando entrada de hist√≥rico para medicamento perdido:', logEntry);
      
      updatedHistory = [...history, logEntry];
      setHistory(updatedHistory);
      
      // Salvar hist√≥rico no AsyncStorage e notificar contatos de emerg√™ncia
      if (isAuthenticated && user?.id) {
        try {
          await AsyncStorage.setItem(`history_${user.id}`, JSON.stringify(updatedHistory));
          console.log('Hist√≥rico de medicamento perdido salvo com sucesso');
          
          // Notificar contatos de emerg√™ncia
          try {
            console.log('Notificando contatos de emerg√™ncia...');
            const response = await api.post('/notifications/medication-missed', {
              medicationName: medication.name,
              scheduledTime: scheduledTime || currentDate.toISOString()
            });
            
            if (response.data.success) {
              console.log('Contatos de emerg√™ncia notificados com sucesso');
            } else {
              console.warn('Aviso: N√£o foi poss√≠vel notificar todos os contatos de emerg√™ncia', 
                response.data.details);
            }
          } catch (error) {
            console.error('Erro ao notificar contatos de emerg√™ncia:', error);
          }
        } catch (storageError) {
          console.error('Erro ao salvar hist√≥rico no AsyncStorage:', storageError);
          // N√£o vamos falhar completamente se apenas o salvamento no AsyncStorage falhar
        }
      }
      
      return true;
    } catch (error) {
      console.error('Erro ao registrar medicamento perdido:', error);
      // Tentar registrar um log de erro no hist√≥rico
      try {
        const errorLog = {
          id: `error_${Date.now()}`,
          type: 'error',
          message: 'Falha ao registrar medicamento perdido',
          error: error.message,
          medicationId,
          timestamp: new Date().toISOString(),
          scheduledTime: scheduledTime || new Date().toISOString()
        };
        
        const errorHistory = [...history, errorLog];
        setHistory(errorHistory);
        
        if (isAuthenticated && user?.id) {
          await AsyncStorage.setItem(`history_${user.id}`, JSON.stringify(errorHistory));
        }
      } catch (innerError) {
        console.error('Falha ao registrar erro no hist√≥rico:', innerError);
      }
      
      return false;
    }
  };

  // Calcular a taxa de ades√£o para um per√≠odo espec√≠fico
  const calculateAdherenceRate = (startDate, endDate) => {
    try {
      // Filtrar hist√≥rico pelo per√≠odo
      const periodHistory = history.filter(item => {
        const itemDate = new Date(item.date || item.timestamp || item.takenAt || item.missedAt);
        return itemDate >= startDate && itemDate <= endDate;
      });
      
      if (periodHistory.length === 0) {
        return 0;
      }
      
      // Contar medicamentos tomados
      const takenCount = periodHistory.filter(item => 
        item.status === 'taken' || item.status === 'tomado'
      ).length;
      
      // Contar total de medicamentos (tomados + perdidos)
      const totalCount = periodHistory.filter(item => 
        item.status === 'taken' || item.status === 'tomado' || 
        item.status === 'missed' || item.status === 'perdido'
      ).length;
      
      if (totalCount === 0) {
        return 0;
      }
      
      return Math.round((takenCount / totalCount) * 100);
    } catch (error) {
      console.error('Erro ao calcular taxa de ades√£o:', error);
      return 0;
    }
  };

  // Obter o hist√≥rico para um per√≠odo espec√≠fico
  const getHistoryForPeriod = (startDate, endDate) => {
    try {
      // Filtrar hist√≥rico pelo per√≠odo
      return history.filter(item => {
        try {
          const itemDateStr = item.date || item.timestamp || item.takenAt || item.missedAt;
          if (!itemDateStr) return false;
          
          const itemDate = new Date(itemDateStr);
          return itemDate >= startDate && itemDate <= endDate;
        } catch (error) {
          console.error('Erro ao processar data do item:', error);
          return false;
        }
      }).sort((a, b) => {
        // Ordenar por data (mais recente primeiro)
        const getDate = (entry) => {
          const dateStr = entry.date || entry.timestamp || entry.takenAt || entry.missedAt;
          return dateStr ? new Date(dateStr) : new Date(0);
        };
        
        return getDate(b) - getDate(a);
      });
    } catch (error) {
      console.error('Erro ao obter hist√≥rico para per√≠odo:', error);
      return [];
    }
  };

  // Obter medicamentos programados para hoje
  const getTodayMedications = () => {
    try {
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);
      
      // Filtrar medicamentos ativos
      return medications.filter(med => {
        // Verificar per√≠odo de tratamento
        const startDate = med.startDate ? new Date(med.startDate) : null;
        const endDate = med.endDate ? new Date(med.endDate) : null;
        
        const isWithinTreatmentPeriod = 
          (!startDate || today >= startDate) && 
          (!endDate || today <= endDate);
        
        if (!isWithinTreatmentPeriod) {
          return false;
        }
        
        // Verificar frequ√™ncia
        if (med.frequency === 'daily') {
          return true;
        } else if (med.frequency === 'weekly' && med.daysOfWeek && med.daysOfWeek.length > 0) {
          // Verificar se o dia atual est√° na lista de dias selecionados
          const dayOfWeek = today.getDay(); // 0 = domingo, 1 = segunda, etc.
          return med.daysOfWeek.includes(dayOfWeek);
        }
        
        return false;
      });
    } catch (error) {
      console.error('Erro ao obter medicamentos para hoje:', error);
      return [];
    }
  };

  // Limpar o hist√≥rico
  const clearHistory = async () => {
    try {
      setHistory([]);
      
      // Salvar hist√≥rico vazio no AsyncStorage
      if (isAuthenticated && user?.id) {
        await AsyncStorage.setItem(`history_${user.id}`, JSON.stringify([]));
      }
      
      return true;
    } catch (error) {
      console.error('Erro ao limpar hist√≥rico:', error);
      return false;
    }
  };

  // Atualizar configura√ß√µes de notifica√ß√£o
  const updateNotificationSettings = async (settings) => {
    try {
      const updatedSettings = { ...notificationSettings, ...settings };
      setNotificationSettings(updatedSettings);
      
      if (isAuthenticated && user?.id) {
        await AsyncStorage.setItem(
          `notificationSettings_${user.id}`,
          JSON.stringify(updatedSettings)
        );
      }
      return true;
    } catch (error) {
      console.error('Erro ao atualizar configura√ß√µes de notifica√ß√£o:', error);
      return false;
    }
  };

  // Verificar notifica√ß√µes agendadas
  const checkScheduledNotifications = async () => {
    try {
      const scheduledNotifications = await Notifications.getAllScheduledNotificationsAsync();
      console.log('Notifica√ß√µes agendadas:', scheduledNotifications.length);
      return scheduledNotifications;
    } catch (error) {
      console.error('Erro ao verificar notifica√ß√µes agendadas:', error);
      return [];
    }
  };

  // Objeto para armazenar os timeouts de notifica√ß√£o
  const [notificationTimeouts, setNotificationTimeouts] = useState({});

  // Configurar notifica√ß√µes
  useEffect(() => {
    const configureNotifications = async () => {
      try {
        // Solicitar permiss√µes de notifica√ß√£o
        const { status: existingStatus } = await Notifications.getPermissionsAsync();
        let finalStatus = existingStatus;
        
        if (existingStatus !== 'granted') {
          const { status } = await Notifications.requestPermissionsAsync();
          finalStatus = status;
        }
        
        if (finalStatus !== 'granted') {
          console.log('Permiss√£o de notifica√ß√£o n√£o concedida!');
          return;
        }
        
        // Configurar como as notifica√ß√µes s√£o exibidas quando o app est√° em primeiro plano
        Notifications.setNotificationHandler({
          handleNotification: async () => ({
            shouldShowAlert: true,
            shouldPlaySound: notificationSettings.soundEnabled,
            shouldSetBadge: true,
            priority: Notifications.AndroidNotificationPriority.HIGH,
          }),
        });
        
        // Configurar receptor para processar notifica√ß√µes
        const subscription = Notifications.addNotificationReceivedListener(notification => {
          try {
            const data = notification.request.content.data;
            console.log('üì± Notifica√ß√£o recebida:', {
              title: notification.request.content.title,
              data: data,
              timestamp: new Date().toISOString()
            });
            
            // Se for o √∫ltimo lembrete, marcar como perdido ap√≥s um tempo
            if (data && data.isReminder && data.reminderNumber === notificationSettings.maxReminders) {
              const medicationId = data.medicationId;
              const scheduledTime = data.scheduledTime;
              
              console.log(`üîî √öltimo lembrete recebido para medicamento ${medicationId} √†s ${scheduledTime}`);
              
              // Verificar se o medicamento existe e n√£o foi tomado
              if (medicationId) {
                // Buscar no hist√≥rico se o medicamento j√° foi tomado
                const medicationHistory = history.filter(item => 
                  item.medicationId === medicationId && 
                  item.scheduledTime === scheduledTime
                );
                
                const wasTaken = medicationHistory.some(item => 
                  item.status === 'taken' || item.status === 'tomado'
                );
                
                if (wasTaken) {
                  console.log(`‚úÖ Medicamento ${medicationId} j√° foi tomado, pulando marca√ß√£o como perdido`);
                  return;
                }
                
                // Verificar se j√° existe um registro de "perdido" para este hor√°rio
                const wasAlreadyMarkedAsMissed = medicationHistory.some(item => 
                  item.status === 'missed' || item.status === 'perdido'
                );
                
                if (wasAlreadyMarkedAsMissed) {
                  console.log('‚ÑπÔ∏è  Medicamento j√° foi marcado como perdido anteriormente');
                  return;
                }
                
                // Se n√£o foi tomado, marcar como perdido ap√≥s 5 minutos
                console.log(`‚è≥ Agendando marca√ß√£o autom√°tica como perdido para 5 minutos no futuro`);
                
                const timeoutId = setTimeout(async () => {
                  try {
                    console.log(`‚åõÔ∏è Verificando novamente se o medicamento ${medicationId} foi tomado...`);
                    
                    // Verificar novamente se o medicamento foi tomado durante a espera
                    const updatedHistory = [...history];
                    const wasTakenInMeantime = updatedHistory.some(item => 
                      item.medicationId === medicationId && 
                      item.scheduledTime === scheduledTime &&
                      (item.status === 'taken' || item.status === 'tomado')
                    );
                    
                    if (wasTakenInMeantime) {
                      console.log(`‚úÖ Medicamento ${medicationId} foi tomado durante a espera, cancelando marca√ß√£o como perdido`);
                      return;
                    }
                    
                    // Marcar como perdido
                    console.log(`‚ö†Ô∏è  Marcando medicamento ${medicationId} como perdido (hor√°rio: ${scheduledTime})`);
                    await logMedicationMissed(medicationId, scheduledTime);
                    
                    // Atualizar a lista de medicamentos para refletir a mudan√ßa
                    setMedications(prevMedications => 
                      prevMedications.map(med => 
                        med.id === medicationId 
                          ? { ...med, lastStatus: 'missed', lastUpdated: new Date().toISOString() }
                          : med
                      )
                    );
                    
                    console.log(`‚úÖ Medicamento ${medicationId} marcado como perdido com sucesso`);
                  } catch (error) {
                    console.error('‚ùå Erro ao marcar medicamento como perdido:', error);
                  }
                }, 5 * 60 * 1000); // 5 minutos
                
                // Armazenar o timeoutId para poss√≠vel cancelamento
                notificationTimeouts[`${medicationId}_${scheduledTime}`] = timeoutId;
              }
            }
          } catch (error) {
            console.error('‚ùå Erro ao processar notifica√ß√£o:', error);
          }
        });
        
        console.log('Notifica√ß√µes configuradas com sucesso');
        
        return () => {
          // Limpar todos os timeouts pendentes
          console.log('Limpando timeouts de notifica√ß√£o...');
          Object.values(notificationTimeouts).forEach(clearTimeout);
          
          // Limpar o listener de notifica√ß√µes
          if (subscription) {
            subscription.remove();
          }
        };
      } catch (error) {
        console.error('Erro ao configurar notifica√ß√µes:', error);
      }
    };
    
    configureNotifications();
  }, [notificationSettings, history]);

  // Agendar notifica√ß√£o para um medicamento
  const scheduleNotification = async (medication, scheduledTime) => {
    // 1. Valida√ß√£o inicial dos par√¢metros
    if (!medication || typeof medication !== 'object') {
      console.error('‚ùå Erro: Objeto de medicamento inv√°lido ou n√£o fornecido');
      return null;
    }

    const medicationId = medication.id;
    const medicationName = medication.name || 'Medicamento desconhecido';
    const isReminder = !!medication.isReminder;
    const reminderNumber = medication.reminderNumber || 0;
    const reminderText = medication.reminderText || '';

    console.log(`\nüìù Iniciando agendamento de ${isReminder ? 'lembrete' : 'notifica√ß√£o principal'}`);
    console.log(`üíä Medicamento: ${medicationName} (ID: ${medicationId})`);
    console.log(`‚è∞ Hor√°rio solicitado: ${scheduledTime}`);

    try {
      // 2. Verificar e solicitar permiss√µes de notifica√ß√£o
      console.log('üîí Verificando permiss√µes de notifica√ß√£o...');
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;
      
      if (existingStatus !== 'granted') {
        console.log('‚ÑπÔ∏è  Solicitando permiss√£o de notifica√ß√£o...');
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }
      
      if (finalStatus !== 'granted') {
        console.warn('‚ö†Ô∏è  Aviso: Permiss√£o de notifica√ß√£o n√£o concedida pelo usu√°rio');
        return null;
      }
      console.log('‚úÖ Permiss√£o de notifica√ß√£o concedida');

      // 3. Processar e validar a data/hora
      console.log('üìÖ Processando data/hora da notifica√ß√£o...');
      let notificationDate;
      try {
        if (typeof scheduledTime === 'string') {
          if (scheduledTime.includes('T')) {
            // Formato ISO (2023-01-01T10:00:00)
            notificationDate = new Date(scheduledTime);
          } else if (/^\d{1,2}:\d{2}$/.test(scheduledTime)) {
            // Formato HH:MM
            const [hours, minutes] = scheduledTime.split(':').map(Number);
            notificationDate = new Date();
            notificationDate.setHours(hours, minutes, 0, 0);
            
            // Se o hor√°rio j√° passou hoje, agendar para amanh√£
            const now = new Date();
            if (notificationDate <= now) {
              console.log(`‚è≠Ô∏è  Hor√°rio j√° passou hoje, agendando para amanh√£`);
              notificationDate.setDate(notificationDate.getDate() + 1);
            }
          } else {
            throw new Error(`Formato de hor√°rio n√£o reconhecido: ${scheduledTime}`);
          }
        } else if (scheduledTime instanceof Date) {
          notificationDate = new Date(scheduledTime); // Criar uma nova inst√¢ncia
        } else {
          throw new Error(`Tipo de data/hora inv√°lido: ${typeof scheduledTime}`);
        }
        
        // Validar se a data √© v√°lida
        if (isNaN(notificationDate.getTime())) {
          throw new Error('Data inv√°lida ap√≥s convers√£o');
        }
        
        console.log(`üìÜ Data/hora processada: ${notificationDate.toLocaleString('pt-BR')}`);
      } catch (error) {
        console.error(`‚ùå Erro ao processar data/hora: ${error.message}`);
        return null;
      }
      
      // 4. Criar uma c√≥pia da data para evitar modificar a original
      const notificationDateCopy = new Date(notificationDate);
      
      // 5. Ajustar para o fuso hor√°rio local (mas n√£o modificar a data)
      const timezoneOffset = notificationDateCopy.getTimezoneOffset() * 60000;
      const localTime = new Date(notificationDateCopy.getTime() - timezoneOffset);
      
      // 6. Verificar se a data n√£o est√° no passado (com toler√¢ncia de 1 minuto)
      const now = new Date();
      const oneMinuteAgo = new Date(now.getTime() - 60000); // 1 minuto atr√°s
      
      console.log(`üïí Verificando se a data est√° no passado:`);
      console.log(`   - Data da notifica√ß√£o: ${localTime.toLocaleString('pt-BR')}`);
      console.log(`   - Agora: ${now.toLocaleString('pt-BR')}`);
      
      if (notificationDateCopy <= oneMinuteAgo) {
        console.log(`‚è≠Ô∏è  Data/hora no passado (${localTime.toLocaleString('pt-BR')}), ajustando para amanh√£`);
        notificationDateCopy.setDate(notificationDateCopy.getDate() + 1);
        // Atualiza a data de notifica√ß√£o para a c√≥pia modificada
        notificationDate = new Date(notificationDateCopy);
      } else {
        console.log('‚úÖ Data/hora da notifica√ß√£o est√° no futuro, prosseguindo com o agendamento');
      }
      
      // 7. Criar um ID √∫nico para a notifica√ß√£o
      const notificationId = `${medicationId}_${notificationDate.getTime()}`;
      if (isReminder) {
        console.log(`   #${reminderNumber} ID: ${notificationId}`);
      }
      
      // 7. Verificar se j√° existe uma notifica√ß√£o agendada com o mesmo ID
      console.log('üîç Verificando notifica√ß√µes duplicadas...');
      const scheduledNotifications = await Notifications.getAllScheduledNotificationsAsync();
      const existingNotification = scheduledNotifications.find(
        n => n.content.data.uniqueId === notificationId
      );
      
      if (existingNotification) {
        console.log('‚ÑπÔ∏è  Notifica√ß√£o j√° agendada anteriormente, pulando...');
        return notificationId;
      }
      
      // 8. Preparar o conte√∫do da notifica√ß√£o
      console.log('üìù Preparando conte√∫do da notifica√ß√£o...');
      const notificationContent = {
        title: isReminder 
          ? (reminderNumber === notificationSettings.maxReminders 
              ? '‚è∞ √öltimo Lembrete!' 
              : 'üîî Lembrete de Medicamento')
          : 'üíä Hora do Medicamento',
        
        body: isReminder && reminderText 
          ? reminderText 
          : `Est√° na hora de tomar ${medicationName}${medication.dosage ? ` (${medication.dosage})` : ''}`,
        
        sound: notificationSettings.soundEnabled,
        vibrate: notificationSettings.vibrationEnabled ? [0, 250, 250, 250] : undefined,
        channelId: 'medication-reminders',
        priority: 'high',
        data: { 
          medicationId,
          scheduledTime: notificationDate.toISOString(),
          medicationName: medicationName,
          isReminder,
          reminderNumber,
          uniqueId: notificationId,
          timestamp: Date.now()
        },
      };

      // 9. Agendar a notifica√ß√£o
      console.log('‚è≥ Agendando notifica√ß√£o...');
      const scheduledId = await Notifications.scheduleNotificationAsync({
        content: notificationContent,
        trigger: notificationDate, // Usando o objeto Date diretamente
      });
      
      // 10. Log de sucesso
      console.log(`‚úÖ Notifica√ß√£o agendada com sucesso!`);
      console.log(`   ID: ${scheduledId}`);
      console.log(`   Para: ${notificationDate.toLocaleString('pt-BR')}`);
      console.log(`   Tipo: ${isReminder ? `Lembrete ${reminderNumber}/${notificationSettings.maxReminders}` : 'Notifica√ß√£o Principal'}`);
      
      return scheduledId;
      
    } catch (error) {
      console.error('‚ùå ERRO CR√çTICO ao agendar notifica√ß√£o:', error);
      return null;
    }
  };
  
  // Agendar todas as notifica√ß√µes para um medicamento
  const scheduleNotificationsForMedication = async (medication) => {
    try {
      // Valida√ß√£o inicial dos par√¢metros
      if (!medication || !medication.id) {
        console.error('Objeto de medicamento inv√°lido ou sem ID');
        return false;
      }
      
      if (!Array.isArray(medication.timeOfDay) || medication.timeOfDay.length === 0) {
        console.error('Nenhum hor√°rio definido para o medicamento ou formato inv√°lido');
        return false;
      }
      
      console.log(`\n=== INICIANDO AGENDAMENTO ===`);
      console.log(`Medicamento: ${medication.name} (ID: ${medication.id})`);
      console.log(`Hor√°rios: ${medication.timeOfDay.join(', ')}`);
      
      // 1. Primeiro, cancelamos todas as notifica√ß√µes existentes para este medicamento
      console.log('\nüîç Cancelando notifica√ß√µes existentes...');
      const cancelSuccess = await cancelNotificationsForMedication(medication.id);
      if (!cancelSuccess) {
        console.warn('‚ö†Ô∏è Aviso: N√£o foi poss√≠vel cancelar todas as notifica√ß√µes existentes');
        // Continuamos mesmo assim, pois pode ser o primeiro agendamento
      }
      
      // 2. Para cada hor√°rio do medicamento, agendamos uma notifica√ß√£o principal
      console.log('\n‚è∞ Iniciando agendamento de notifica√ß√µes principais...');
      let totalScheduled = 0;
      let totalFailed = 0;
      
      for (const timeStr of medication.timeOfDay) {
        try {
          // Validar formato do hor√°rio (HH:MM)
          if (!/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/.test(timeStr)) {
            console.error(`Formato de hor√°rio inv√°lido: ${timeStr}`);
            totalFailed++;
            continue;
          }
          
          console.log(`\nüîÑ Processando hor√°rio: ${timeStr}`);
          
          // Criar data para hoje com o hor√°rio especificado
          const [hours, minutes] = timeStr.split(':').map(Number);
          const notificationDate = new Date();
          notificationDate.setHours(hours, minutes, 0, 0);
          
          // Se o hor√°rio j√° passou hoje, agendamos para amanh√£
          const now = new Date();
          if (notificationDate <= now) {
            console.log(`‚è≠Ô∏è  Hor√°rio ${timeStr} j√° passou hoje, agendando para amanh√£`);
            notificationDate.setDate(notificationDate.getDate() + 1);
          }
          
          console.log(`üìÖ Agendando notifica√ß√£o principal para: ${notificationDate.toLocaleString('pt-BR')}`);
          
          // 3. Agendar notifica√ß√£o principal
          const notificationId = await scheduleNotification(medication, notificationDate);
          
          if (!notificationId) {
            console.error(`‚ùå Falha ao agendar notifica√ß√£o principal para ${medication.name} √†s ${timeStr}`);
            totalFailed++;
            continue;
          }
          
          console.log(`‚úÖ Notifica√ß√£o principal agendada com sucesso! ID: ${notificationId}`);
          totalScheduled++;
          
          // 4. Se configurado, agendar lembretes adicionais
          if (notificationSettings.maxReminders > 0 && notificationSettings.reminderInterval > 0) {
            console.log(`\nüîî Configurando ${notificationSettings.maxReminders} lembretes com intervalo de ${notificationSettings.reminderInterval} minutos`);
            
            for (let i = 1; i <= notificationSettings.maxReminders; i++) {
              const reminderDate = new Date(notificationDate);
              const minutesToAdd = i * notificationSettings.reminderInterval;
              reminderDate.setMinutes(reminderDate.getMinutes() + minutesToAdd);
              
              // Determinar o texto do lembrete
              let reminderText = `Lembrete: Voc√™ ainda n√£o tomou ${medication.name}`;
              if (i === notificationSettings.maxReminders) {
                reminderText = `‚è∞ √öltimo lembrete: ${medication.name} ser√° marcado como perdido se n√£o for tomado`;
              }
              
              console.log(`   üìå Lembrete ${i}/${notificationSettings.maxReminders} para: ${reminderDate.toLocaleString('pt-BR')}`);
              
              // Criar um objeto de lembrete com as informa√ß√µes necess√°rias
              const reminderMedication = {
                ...medication,
                isReminder: true,
                reminderNumber: i,
                reminderText: reminderText
              };
              
              // Agendar o lembrete
              const reminderId = await scheduleNotification(reminderMedication, reminderDate);
              
              if (reminderId) {
                console.log(`   ‚úÖ Lembrete ${i} agendado com sucesso!`);
                totalScheduled++;
              } else {
                console.error(`   ‚ùå Falha ao agendar lembrete ${i}`);
                totalFailed++;
              }
            }
          }
        } catch (innerError) {
          console.error(`‚ö†Ô∏è Erro inesperado ao processar hor√°rio ${timeStr}:`, innerError);
          totalFailed++;
        }
      }
      
      // 5. Relat√≥rio final
      console.log('\nüìä RESUMO DO AGENDAMENTO:');
      console.log(`‚úÖ Notifica√ß√µes agendadas com sucesso: ${totalScheduled}`);
      if (totalFailed > 0) {
        console.warn(`‚ö†Ô∏è Falhas no agendamento: ${totalFailed}`);
      }
      
      return totalScheduled > 0; // Retorna true se pelo menos uma notifica√ß√£o foi agendada
      
    } catch (error) {
      console.error('‚ùå ERRO CR√çTICO ao agendar notifica√ß√µes:', error);
      return false;
    }
  };
  
  // Cancelar todas as notifica√ß√µes para um medicamento
  const cancelNotificationsForMedication = async (medicationId) => {
    try {
      if (!medicationId) {
        console.warn('ID do medicamento n√£o fornecido para cancelamento de notifica√ß√µes');
        return false;
      }
      
      console.log(`Iniciando cancelamento de notifica√ß√µes para o medicamento: ${medicationId}`);
      
      // Obter todas as notifica√ß√µes agendadas
      const scheduledNotifications = await Notifications.getAllScheduledNotificationsAsync();
      console.log(`Total de notifica√ß√µes agendadas: ${scheduledNotifications.length}`);
      
      // Filtrar notifica√ß√µes para este medicamento
      const medicationNotifications = scheduledNotifications.filter(
        notification => notification.content.data?.medicationId === medicationId
      );
      
      console.log(`Encontradas ${medicationNotifications.length} notifica√ß√µes para o medicamento ${medicationId}`);
      
      // Cancelar cada notifica√ß√£o
      let successCount = 0;
      let errorCount = 0;
      
      for (const notification of medicationNotifications) {
        try {
          console.log(`Cancelando notifica√ß√£o: ${notification.identifier}`, {
            title: notification.content.title,
            scheduledTime: notification.content.data?.scheduledTime || 'n√£o especificado',
            isReminder: notification.content.data?.isReminder || false
          });
          
          await Notifications.cancelScheduledNotificationAsync(notification.identifier);
          console.log(`‚úÖ Notifica√ß√£o cancelada com sucesso: ${notification.identifier}`);
          successCount++;
        } catch (error) {
          console.error(`‚ùå Falha ao cancelar notifica√ß√£o ${notification.identifier}:`, error);
          errorCount++;
        }
      }
      
      console.log(`Cancelamento conclu√≠do. Sucessos: ${successCount}, Falhas: ${errorCount}`);
      
      return errorCount === 0; // Retorna true apenas se todas as opera√ß√µes foram bem-sucedidas
    } catch (error) {
      console.error('Erro ao cancelar notifica√ß√µes:', error);
      return false;
    }
  };

  return (
    <MedicationContext.Provider
      value={{
        medications,
        history,
        loading,
        addMedication,
        updateMedication,
        deleteMedication,
        logMedicationTaken,
        logMedicationMissed,
        calculateAdherenceRate,
        getHistoryForPeriod,
        getTodayMedications,
        clearHistory,
        notificationSettings,
        updateNotificationSettings,
        scheduleNotification,
        checkScheduledNotifications, // Adicionando a fun√ß√£o ao contexto
      }}
    >
      {children}
    </MedicationContext.Provider>
  );
};
